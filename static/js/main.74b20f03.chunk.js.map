{"version":3,"sources":["components/Chart/styles.module.scss","components/Chart/Chart.js","components/App/App.js","serviceWorker.js","index.js","components/App/styles.module.scss"],"names":["module","exports","CustomToolTip","active","payload","label","className","styles","custoom_tooltip","tooltip_label","tooltip_id","id","tooltip_value","Price","style","width","marginLeft","marginRight","Chart","props","lastItem","data","length","main_chart_container","chart_header","left_container","currency_name","currency","currency_value","height","margin","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","strokeDasharray","dataKey","type","domain","orientation","content","stroke","fill","fillOpacity","legendType","dot","textAlign","App","useState","chartData","setChartData","useEffect","ws","WebSocket","onopen","e","send","JSON","stringify","onmessage","parse","price","parseFloat","toFixed","product_id","d","Date","currentData","name","toDateString","toLocaleTimeString","onerror","console","log","onclose","app_header","alignItems","chart_container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,kCAAkC,gDAAgD,aAAa,2BAA2B,mBAAmB,iCAAiC,2BAA2B,yCAAyC,4BAA4B,0CAA0C,aAAa,2BAA2B,eAAe,6BAA6B,oBAAoB,kCAAkC,yBAAyB,uCAAuC,+BAA+B,6CAA6C,+BAA+B,6CAA6C,0BAA0B,wCAAwC,+BAA+B,6CAA6C,wCAAwC,sDAAsD,qBAAqB,mCAAmC,2BAA2B,yCAAyC,eAAe,6BAA6B,qBAAqB,mCAAmC,sBAAsB,oCAAoC,+BAA+B,6CAA6C,4BAA4B,0CAA0C,6BAA6B,2CAA2C,sBAAsB,oCAAoC,qBAAqB,mCAAmC,UAAU,wBAAwB,mBAAmB,iCAAiC,2BAA2B,yCAAyC,WAAa,2BAA2B,gCAAgC,8CAA8C,uCAAuC,qDAAqD,uCAAuC,qDAAqD,6CAA6C,2DAA2D,SAAW,yBAAyB,UAAY,0BAA0B,oBAAoB,kCAAkC,0BAA0B,wCAAwC,iCAAiC,+CAA+C,8BAA8B,4CAA4C,6BAA6B,2CAA2C,cAAc,4BAA4B,4BAA4B,0CAA0C,aAAa,2BAA2B,YAAY,0BAA0B,YAAY,0BAA0B,mBAAmB,iCAAiC,yBAAyB,uCAAuC,0BAA0B,wCAAwC,2BAA2B,yCAAyC,kBAAkB,gCAAgC,4BAA4B,0CAA0C,qBAAuB,qCAAqC,aAAe,6BAA6B,eAAiB,+BAA+B,eAAiB,+BAA+B,gBAAkB,gCAAgC,cAAgB,8BAA8B,WAAa,2BAA2B,cAAgB,gC,6LCWl4GC,EAAgB,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,OAAOC,EAAmB,EAAnBA,QAAQC,EAAW,EAAXA,MACnC,OAAGF,EAEK,yBAAKG,UAAWC,IAAOC,iBACnB,yBAAKF,UAAWC,IAAOE,eAAgBJ,GACvC,uBAAGC,UAAWC,IAAOG,YAAaN,EAAQ,GAAGA,QAAQO,IACrD,uBAAGL,UAAWC,IAAOK,eAAgBR,EAAQ,GAAGA,QAAQS,QAI7D,MAGLC,EAAQ,CACVC,MAAO,MACPC,WAAY,OACZC,YAAa,QAwDFC,MArDf,SAAeC,GACX,IAAMC,EAAWD,EAAME,KAAKF,EAAME,KAAKC,OAAQ,GAC/C,OAAGF,EAEK,yBAAKd,UAAWC,IAAOgB,qBAAsBT,MAAOA,GAChD,yBAAKR,UAAWC,IAAOiB,cACnB,yBAAKlB,UAAWC,IAAOkB,gBACnB,uBAAGnB,UAAWC,IAAOmB,eAAgBP,EAAMQ,UAC3C,uBAAGrB,UAAWC,IAAOqB,gBAAiBR,EAASP,SAGvD,kBAAC,IAAD,CAAqBE,MAAM,OAAOc,OAAO,OACrC,kBAAC,IAAD,CACIR,KAAMF,EAAME,KACZS,OACI,CACIC,IAAK,GACLC,MAAO,GACPC,KAAM,GACNC,OAAQ,KAGhB,8BACI,oCAAgBvB,GAAG,UAAUwB,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACjD,0BAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,0BAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,MAG5D,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,CAAOC,KAAK,SACRC,OAAQ,CAAC,gBAAiB,iBAC1BC,YAAY,UAChB,kBAAC,IAAD,CAASC,QAAS,kBAAC,EAAD,QAClB,kBAAC,IAAD,CAAMH,KAAK,WACPD,QAAQ,QACRK,OAAO,UACPC,KAAK,gBACLC,YAAa,EACbC,WAAW,SACXC,KAAK,OAQrB,wBAAItC,MAAO,CAACuC,UAAW,WAAvB,gB,iBCnBGC,MAxDf,WAAe,IAAD,EAEqBC,mBAAS,IAF9B,mBAELC,EAFK,KAEKC,EAFL,KAyCX,OApCDC,qBAAU,WAER,IAAMC,EAAK,IAAIC,UAAU,kCAEzBD,EAAGE,OAAS,SAASC,GACnBH,EAAGI,KAAKC,KAAKC,UACX,CACE,KAAQ,YACR,SAAY,CACV,CACE,KAAO,SACP,YAAc,CAbL,iBAmBnBN,EAAGO,UAAY,SAASJ,GACtB,IAAIzC,EAAO2C,KAAKG,MAAML,EAAEzC,MACxB,GAAgB,UAAbA,EAAKuB,KAAiB,CACvB,IAAIwB,EAAQC,WAAWhD,EAAK+C,OAAOE,QAAQ,GACvC3D,EAAKU,EAAKkD,WACVC,EAAI,IAAIC,KACZhB,GAAc,SAAAiB,GAAW,4BAAQA,GAAR,CAAqB,CAAEC,KAAMH,EAAEI,eAAe,IAAIJ,EAAEK,qBAAsBhE,MAAOuD,EAAOzD,GAAIA,UAIzHgD,EAAGmB,QAAU,SAAShB,GACpBiB,QAAQC,IAAIlB,IAGdH,EAAGsB,QAAU,SAASnB,GACpBiB,QAAQC,IAAIlB,MAEb,IAGC,yBAAKxD,UAAU,OACb,4BAAQA,UAAWC,IAAO2E,WAClBpE,MAAO,CACLqE,WAAY,WAEpB,sDAEF,yBAAK7E,UAAWC,IAAO6E,iBACrB,kBAAC,EAAD,CAAO/D,KAAMmC,EAAW7B,SA/CX,eCKH0D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a,mBExI5BvG,EAAOC,QAAU,CAAC,WAAa,2BAA2B,gBAAkB,mC","file":"static/js/main.74b20f03.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"react-vis-magic-css-import-rule\":\"styles_react-vis-magic-css-import-rule__2iO81\",\"rv-treemap\":\"styles_rv-treemap__11VV5\",\"rv-treemap__leaf\":\"styles_rv-treemap__leaf__3wN3e\",\"rv-treemap__leaf--circle\":\"styles_rv-treemap__leaf--circle__2Ncda\",\"rv-treemap__leaf__content\":\"styles_rv-treemap__leaf__content__o1_7W\",\"rv-xy-plot\":\"styles_rv-xy-plot__1GQO3\",\"rv-xy-canvas\":\"styles_rv-xy-canvas__Zxb7Z\",\"rv-xy-plot__inner\":\"styles_rv-xy-plot__inner__27HVk\",\"rv-xy-plot__axis__line\":\"styles_rv-xy-plot__axis__line__3UdpY\",\"rv-xy-plot__axis__tick__line\":\"styles_rv-xy-plot__axis__tick__line__327Jc\",\"rv-xy-plot__axis__tick__text\":\"styles_rv-xy-plot__axis__tick__text__2MAZX\",\"rv-xy-plot__axis__title\":\"styles_rv-xy-plot__axis__title__15rnz\",\"rv-xy-plot__grid-lines__line\":\"styles_rv-xy-plot__grid-lines__line__1rAsK\",\"rv-xy-plot__circular-grid-lines__line\":\"styles_rv-xy-plot__circular-grid-lines__line__uKVHY\",\"rv-xy-plot__series\":\"styles_rv-xy-plot__series__2gdSc\",\"rv-xy-plot__series--line\":\"styles_rv-xy-plot__series--line__3Jm0J\",\"rv-crosshair\":\"styles_rv-crosshair__33HYi\",\"rv-crosshair__line\":\"styles_rv-crosshair__line__17sK4\",\"rv-crosshair__inner\":\"styles_rv-crosshair__inner__1x2_b\",\"rv-crosshair__inner__content\":\"styles_rv-crosshair__inner__content__5FYnM\",\"rv-crosshair__inner--left\":\"styles_rv-crosshair__inner--left__1cXwt\",\"rv-crosshair__inner--right\":\"styles_rv-crosshair__inner--right__1_KQI\",\"rv-crosshair__title\":\"styles_rv-crosshair__title__2KJg0\",\"rv-crosshair__item\":\"styles_rv-crosshair__item__1awPb\",\"rv-hint\":\"styles_rv-hint__4eULC\",\"rv-hint__content\":\"styles_rv-hint__content__1CX9D\",\"rv-discrete-color-legend\":\"styles_rv-discrete-color-legend__21Fb1\",\"horizontal\":\"styles_horizontal__LNLMH\",\"rv-discrete-color-legend-item\":\"styles_rv-discrete-color-legend-item__2ECNb\",\"rv-discrete-color-legend-item__title\":\"styles_rv-discrete-color-legend-item__title__12L5A\",\"rv-discrete-color-legend-item__color\":\"styles_rv-discrete-color-legend-item__color__ga7tH\",\"rv-discrete-color-legend-item__color__path\":\"styles_rv-discrete-color-legend-item__color__path__1znuv\",\"disabled\":\"styles_disabled__2JGRC\",\"clickable\":\"styles_clickable__38niY\",\"rv-search-wrapper\":\"styles_rv-search-wrapper__2osT_\",\"rv-search-wrapper__form\":\"styles_rv-search-wrapper__form__1hg19\",\"rv-search-wrapper__form__input\":\"styles_rv-search-wrapper__form__input__BD_In\",\"rv-search-wrapper__contents\":\"styles_rv-search-wrapper__contents__3CfzX\",\"rv-continuous-color-legend\":\"styles_rv-continuous-color-legend__3ntQd\",\"rv-gradient\":\"styles_rv-gradient__KLACI\",\"rv-continuous-size-legend\":\"styles_rv-continuous-size-legend__1me6I\",\"rv-bubbles\":\"styles_rv-bubbles__2Xugv\",\"rv-bubble\":\"styles_rv-bubble__31PFh\",\"rv-spacer\":\"styles_rv-spacer__1pl0z\",\"rv-legend-titles\":\"styles_rv-legend-titles__kvxph\",\"rv-legend-titles__left\":\"styles_rv-legend-titles__left__lky1O\",\"rv-legend-titles__right\":\"styles_rv-legend-titles__right__25Bgs\",\"rv-legend-titles__center\":\"styles_rv-legend-titles__center__1D5uR\",\"rv-radial-chart\":\"styles_rv-radial-chart__4cntE\",\"rv-xy-plot__series--label\":\"styles_rv-xy-plot__series--label__1IgEA\",\"main_chart_container\":\"styles_main_chart_container__1RTOC\",\"chart_header\":\"styles_chart_header__cwsKU\",\"left_container\":\"styles_left_container__2oa9E\",\"currency_value\":\"styles_currency_value__OOVDq\",\"custoom_tooltip\":\"styles_custoom_tooltip__2p4Uz\",\"tooltip_label\":\"styles_tooltip_label__11Src\",\"tooltip_id\":\"styles_tooltip_id__231TS\",\"tooltip_value\":\"styles_tooltip_value__2Kwpl\"};","import React from 'react'\r\nimport styles from './styles.module.scss'\r\nimport { \r\n    AreaChart,\r\n    Area,\r\n    XAxis,\r\n    YAxis,\r\n    CartesianGrid,\r\n    Tooltip,\r\n    ResponsiveContainer\r\n} from 'recharts'\r\n\r\nconst CustomToolTip = ({active,payload,label}) => {\r\n    if(active){\r\n        return(\r\n            <div className={styles.custoom_tooltip}>\r\n                <div className={styles.tooltip_label}>{label}</div>\r\n                <p className={styles.tooltip_id}>{payload[0].payload.id}</p>\r\n                <p className={styles.tooltip_value}>{payload[0].payload.Price}</p>\r\n            </div>\r\n        )\r\n    }\r\n    return null\r\n}\r\n\r\nconst style = {\r\n    width: '90%',\r\n    marginLeft: 'auto',\r\n    marginRight: 'auto'\r\n}\r\n\r\nfunction Chart(props){\r\n    const lastItem = props.data[props.data.length -1]\r\n    if(lastItem){\r\n        return (\r\n            <div className={styles.main_chart_container} style={style}>\r\n                <div className={styles.chart_header}>\r\n                    <div className={styles.left_container}>\r\n                        <p className={styles.currency_name}>{props.currency}</p>  \r\n                        <p className={styles.currency_value}>{lastItem.Price}</p>  \r\n                    </div>\r\n                </div>\r\n                <ResponsiveContainer width=\"100%\" height=\"90%\">\r\n                    <AreaChart \r\n                        data={props.data}\r\n                        margin={\r\n                            {\r\n                                top: 10,\r\n                                right: 20,\r\n                                left: 20,\r\n                                bottom: 30\r\n                            }\r\n                        }>\r\n                        <defs>\r\n                            <linearGradient id=\"colorUv\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                                <stop offset=\"5%\" stopColor=\"#8884d8\" stopOpacity={0.8}/>\r\n                                <stop offset=\"95%\" stopColor=\"#8884d8\" stopOpacity={0}/>\r\n                            </linearGradient>\r\n                        </defs>\r\n                        <CartesianGrid strokeDasharray=\"2 2\"/>\r\n                        <XAxis dataKey=\"name\"/>\r\n                        <YAxis type=\"number\" \r\n                            domain={['dataMin - 0.1', 'dataMax + 0.1']}\r\n                            orientation=\"right\"/>\r\n                        <Tooltip content={<CustomToolTip/>}/>\r\n                        <Area type=\"monotone\" \r\n                            dataKey=\"Price\"\r\n                            stroke=\"#8884d8\" \r\n                            fill=\"url(#colorUv)\"\r\n                            fillOpacity={1}\r\n                            legendType=\"circle\"\r\n                            dot={true}/>\r\n                    </AreaChart>\r\n                </ResponsiveContainer>\r\n            </div>\r\n        )\r\n    }\r\n    else{\r\n        return(\r\n            <h1 style={{textAlign: \"center\"}}>Loading ...</h1>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Chart","import React, { useEffect, useState } from 'react';\r\nimport Chart from '../Chart/Chart'\r\nimport styles from './styles.module.scss'\r\n\r\nfunction App(){\r\n\r\n  const [chartData,setChartData] = useState([])\r\n  const currencyName = \"ETH-EUR\"\r\n\r\n  useEffect(() => {\r\n\r\n    const ws = new WebSocket('wss://ws-feed.pro.coinbase.com')\r\n\r\n    ws.onopen = function(e){\r\n      ws.send(JSON.stringify(\r\n        {\r\n          \"type\": \"subscribe\", \r\n          \"channels\": [\r\n            {\r\n              \"name\":\"ticker\", \r\n              \"product_ids\":[ currencyName ]\r\n            }\r\n          ]\r\n        }))\r\n    }\r\n\r\n    ws.onmessage = function(e){\r\n      var data = JSON.parse(e.data)\r\n      if(data.type == 'ticker'){\r\n        var price = parseFloat(data.price).toFixed(3)\r\n        var id = data.product_id\r\n        var d = new Date()\r\n        setChartData( currentData => [...currentData, { name: d.toDateString()+' '+d.toLocaleTimeString(), Price: price, id: id }])\r\n      }\r\n    }\r\n\r\n    ws.onerror = function(e){\r\n      console.log(e)\r\n    }\r\n\r\n    ws.onclose = function(e){\r\n      console.log(e)\r\n    }\r\n  }, [])\r\n\r\n   return (\r\n      <div className=\"App\">\r\n        <header className={styles.app_header}\r\n                style={{\r\n                  alignItems: 'center'\r\n                }}>\r\n          <h1>RealTime Crypto Chart</h1>\r\n        </header>\r\n        <div className={styles.chart_container}>    \r\n          <Chart data={chartData} currency={currencyName}/>\r\n        </div>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app_header\":\"styles_app_header__3mbHn\",\"chart_container\":\"styles_chart_container__22SJl\"};"],"sourceRoot":""}